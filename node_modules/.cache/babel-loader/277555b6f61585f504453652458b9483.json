{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction find(array, cb) {\n  for (var i = array.length - 1; i >= 0; i--) {\n    if (cb(array[i])) {\n      return array[i];\n    }\n  }\n}\n\nvar mediaQueries = {\n  between: function between(val1, val2) {\n    return window.matchMedia('screen and (min-width: ' + val1 + 'px) and ' + ('(max-width: ' + (val2 - 1) + 'px)'));\n  },\n  atLeast: function atLeast(val) {\n    return window.matchMedia('screen and (min-width: ' + val + 'px)');\n  },\n  atMost: function atMost(val) {\n    return window.matchMedia('screen and (max-width: ' + (val - 1) + 'px)');\n  }\n};\n\nvar query = function query(bp, nextBp) {\n  return {\n    is: typeof nextBp === 'number' ? mediaQueries.between(bp, nextBp) : mediaQueries.atLeast(bp),\n    atLeast: mediaQueries.atLeast(bp),\n    atMost: mediaQueries.atMost(nextBp || Number.MAX_VALUE)\n  };\n};\n\nvar Breakjs = function Breakjs(bpEntries) {\n  if (!bpEntries) {\n    throw new Error('No breakpoints were defined!');\n  }\n\n  var bps = [];\n\n  var _loop = function (key) {\n    var entry = {\n      name: key,\n      value: bpEntries[key]\n    };\n\n    if (find(bps, function (bp) {\n      return bp.value === entry.value;\n    })) {\n      throw new Error('Breakpoint values must be unique.');\n    }\n\n    bps.push(entry);\n  };\n\n  for (var key in bpEntries) {\n    _loop(key);\n  }\n\n  var breakpoints = bps.sort(function (a, b) {\n    return a.value > b.value;\n  }).map(function (bp, index) {\n    if (typeof bp.name !== 'string') {\n      throw new Error('Invalid breakpoint name -- should be a string.');\n    }\n\n    if (typeof bp.value !== 'number' || bp.value < 0) {\n      throw new Error('Invalid breakpoint value for ' + bp.name + ': ' + bp.value);\n    }\n\n    var breakpoint = {\n      name: bp.name\n    }; // only query\n\n    if (bps.length === 1) {\n      breakpoint.query = query(0, null);\n    } // last query\n    else if (index === bps.length - 1) {\n        breakpoint.query = query(bp.value, null);\n      } // query inbetween\n      else {\n          breakpoint.query = query(bp.value, bps[index + 1].value);\n        }\n\n    return breakpoint;\n  });\n\n  function getBreakpoint(breakpointName) {\n    var findObj = find(breakpoints, function (bp) {\n      return bp.name === breakpointName;\n    });\n\n    if (!findObj) {\n      throw new Error('invalid breakpoint name');\n    }\n\n    return findObj;\n  }\n\n  var changeListeners = [];\n  return {\n    breakpoints: bps,\n\n    /**\n     * Check if the current window size is the given size\n     * @param  {String} size\n     * @return {Boolean}\n     */\n    is: function is(name) {\n      return getBreakpoint(name).query.is.matches;\n    },\n\n    /**\n     * Check if the current window size at least the given size\n     * @param  {String} size\n     * @return {Boolean}\n     */\n    atLeast: function atLeast(name) {\n      return getBreakpoint(name).query.atLeast.matches;\n    },\n\n    /**\n     * Check if the current window size at most the given size\n     * @param  {String} size\n     * @return {Boolean}\n     */\n    atMost: function atMost(name) {\n      return getBreakpoint(name).query.atMost.matches;\n    },\n    current: function current() {\n      var findObj = find(breakpoints, function (bp) {\n        return bp.query.is.matches;\n      });\n\n      if (findObj) {\n        return findObj.name;\n      }\n    },\n    addChangeListener: function addChangeListener(listener) {\n      var _this = this;\n\n      breakpoints.forEach(function (bp) {\n        var changeListener = function changeListener() {\n          var current = _this.current();\n\n          if (current === bp.name) {\n            listener(current);\n          }\n        };\n\n        changeListeners.push({\n          original: listener,\n          created: changeListener\n        });\n        bp.query.is.addListener(changeListener);\n      });\n    },\n    removeChangeListener: function removeChangeListener(listener) {\n      breakpoints.forEach(function (bp) {\n        var findObj = find(changeListeners, function (cl) {\n          return cl.original === listener;\n        });\n\n        if (findObj) {\n          bp.query.is.removeListener(findObj.created);\n          changeListeners.splice(changeListeners.indexOf(findObj), 1);\n        }\n      });\n    }\n  };\n};\n\nif (typeof window !== 'undefined') {\n  window.Breakjs = Breakjs;\n}\n\nexports['default'] = Breakjs;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/home/can/IdeaProjects/devRep/node_modules/breakjs/dist/break.js"],"names":["Object","defineProperty","exports","value","find","array","cb","i","length","mediaQueries","between","val1","val2","window","matchMedia","atLeast","val","atMost","query","bp","nextBp","is","Number","MAX_VALUE","Breakjs","bpEntries","Error","bps","_loop","key","entry","name","push","breakpoints","sort","a","b","map","index","breakpoint","getBreakpoint","breakpointName","findObj","changeListeners","matches","current","addChangeListener","listener","_this","forEach","changeListener","original","created","addListener","removeChangeListener","cl","removeListener","splice","indexOf","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction find(array, cb) {\n  for (var i = array.length - 1; i >= 0; i--) {\n    if (cb(array[i])) {\n      return array[i];\n    }\n  }\n}\n\nvar mediaQueries = {\n  between: function between(val1, val2) {\n    return window.matchMedia('screen and (min-width: ' + val1 + 'px) and ' + ('(max-width: ' + (val2 - 1) + 'px)'));\n  },\n  atLeast: function atLeast(val) {\n    return window.matchMedia('screen and (min-width: ' + val + 'px)');\n  },\n  atMost: function atMost(val) {\n    return window.matchMedia('screen and (max-width: ' + (val - 1) + 'px)');\n  }\n};\n\nvar query = function query(bp, nextBp) {\n  return {\n    is: typeof nextBp === 'number' ? mediaQueries.between(bp, nextBp) : mediaQueries.atLeast(bp),\n    atLeast: mediaQueries.atLeast(bp),\n    atMost: mediaQueries.atMost(nextBp || Number.MAX_VALUE)\n  };\n};\n\nvar Breakjs = function Breakjs(bpEntries) {\n  if (!bpEntries) {\n    throw new Error('No breakpoints were defined!');\n  }\n\n  var bps = [];\n\n  var _loop = function (key) {\n    var entry = { name: key, value: bpEntries[key] };\n\n    if (find(bps, function (bp) {\n      return bp.value === entry.value;\n    })) {\n      throw new Error('Breakpoint values must be unique.');\n    }\n\n    bps.push(entry);\n  };\n\n  for (var key in bpEntries) {\n    _loop(key);\n  }\n\n  var breakpoints = bps.sort(function (a, b) {\n    return a.value > b.value;\n  }).map(function (bp, index) {\n    if (typeof bp.name !== 'string') {\n      throw new Error('Invalid breakpoint name -- should be a string.');\n    }\n\n    if (typeof bp.value !== 'number' || bp.value < 0) {\n      throw new Error('Invalid breakpoint value for ' + bp.name + ': ' + bp.value);\n    }\n\n    var breakpoint = { name: bp.name };\n\n    // only query\n    if (bps.length === 1) {\n      breakpoint.query = query(0, null);\n    }\n\n    // last query\n    else if (index === bps.length - 1) {\n        breakpoint.query = query(bp.value, null);\n      }\n\n      // query inbetween\n      else {\n          breakpoint.query = query(bp.value, bps[index + 1].value);\n        }\n\n    return breakpoint;\n  });\n\n  function getBreakpoint(breakpointName) {\n    var findObj = find(breakpoints, function (bp) {\n      return bp.name === breakpointName;\n    });\n\n    if (!findObj) {\n      throw new Error('invalid breakpoint name');\n    }\n\n    return findObj;\n  }\n\n  var changeListeners = [];\n\n  return {\n    breakpoints: bps,\n\n    /**\n     * Check if the current window size is the given size\n     * @param  {String} size\n     * @return {Boolean}\n     */\n    is: function is(name) {\n      return getBreakpoint(name).query.is.matches;\n    },\n\n    /**\n     * Check if the current window size at least the given size\n     * @param  {String} size\n     * @return {Boolean}\n     */\n    atLeast: function atLeast(name) {\n      return getBreakpoint(name).query.atLeast.matches;\n    },\n\n    /**\n     * Check if the current window size at most the given size\n     * @param  {String} size\n     * @return {Boolean}\n     */\n    atMost: function atMost(name) {\n      return getBreakpoint(name).query.atMost.matches;\n    },\n\n    current: function current() {\n      var findObj = find(breakpoints, function (bp) {\n        return bp.query.is.matches;\n      });\n\n      if (findObj) {\n        return findObj.name;\n      }\n    },\n\n    addChangeListener: function addChangeListener(listener) {\n      var _this = this;\n\n      breakpoints.forEach(function (bp) {\n        var changeListener = function changeListener() {\n          var current = _this.current();\n          if (current === bp.name) {\n            listener(current);\n          }\n        };\n\n        changeListeners.push({\n          original: listener,\n          created: changeListener\n        });\n\n        bp.query.is.addListener(changeListener);\n      });\n    },\n\n    removeChangeListener: function removeChangeListener(listener) {\n      breakpoints.forEach(function (bp) {\n        var findObj = find(changeListeners, function (cl) {\n          return cl.original === listener;\n        });\n\n        if (findObj) {\n          bp.query.is.removeListener(findObj.created);\n          changeListeners.splice(changeListeners.indexOf(findObj), 1);\n        }\n      });\n    }\n  };\n};\n\nif (typeof window !== 'undefined') {\n  window.Breakjs = Breakjs;\n}\n\nexports['default'] = Breakjs;\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}